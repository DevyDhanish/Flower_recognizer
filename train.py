# -*- coding: utf-8 -*-
"""flower_recognition.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_G-nKym4PPxFybTNyDk_SQL8FZAjYGMj
"""

import tensorflow as tf
import tensorflow_hub as hub
import numpy as np
import matplotlib.pyplot as plt
import tensorflow_datasets as tfds
import cv2 as cv

(train_set, validation_set), dataset_info = tfds.load(
    "tf_flowers",
    split=['train[:70%]', 'train[70%:]'],
    with_info=True,
    as_supervised = True
)

class_names = ['dandelion','daisy','tulips','sunflowers','roses']

no_of_image = 0

for i in train_set:
  no_of_image += 1

print(no_of_image)

IMG_RES = 224  
BATCH_SIZE = 32
#format data
def re_format(image, label):
  img = tf.image.resize(image, (IMG_RES, IMG_RES))/255.0
  return img, label

train_batch = train_set.shuffle(2569//4).map(re_format).batch(BATCH_SIZE).prefetch(1)
validation_batch = validation_set.map(re_format).batch(BATCH_SIZE).prefetch(1)

URL = "https://tfhub.dev/google/tf2-preview/mobilenet_v2/feature_vector/4"
feature_vector = hub.KerasLayer(URL, input_shape=(IMG_RES,IMG_RES,3))

feature_vector.trainable = False

print(len(class_names))

model = tf.keras.Sequential([
    feature_vector,
    tf.keras.layers.Dense(16, activation=tf.nn.relu),
    tf.keras.layers.Dense(8, activation=tf.nn.relu),
    tf.keras.layers.Dense(len(class_names), activation=tf.nn.softmax)
])

model.summary()

model.compile(
    optimizer="Adam",
    loss = "sparse_categorical_crossentropy",
    metrics=["accuracy"]
)

EPOCHS = 6

history = model.fit(train_batch,
                    epochs=EPOCHS,
                    validation_data=validation_batch)

acc = history.history['accuracy']
val_acc = history.history['val_accuracy']

loss = history.history['loss']
val_loss = history.history['val_loss']

epochs_range = range(EPOCHS)

plt.plot(epochs_range, acc, label="Model acc")
plt.plot(epochs_range, val_acc, label="val acc")
plt.legend(loc="upper right")
plt.show()
plt.plot(epochs_range, loss, label="Model loss")
plt.plot(epochs_range, val_loss, label="val loss")
plt.legend(loc="upper right")
plt.show()

model_save_path = "/content/model/tf_flower_87.h5"

model.save(model_save_path)